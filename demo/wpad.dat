function FindProxyForURL(url, host) {
    // Normalize the URL and host for pattern matching
    url = url.toLowerCase();
    host = host.toLowerCase();

    try {
        // List of local domains and hostnames to bypass proxy
        const localDomains = [".lan", ".host", ".steamserver.net"];
        const localHosts = ["lan", "host", "steamserver.net"];

        // List of Windows Update domains to bypass proxy
        const windowsUpdateDomains = [
            // Windows Update essential domains
            "*.update.microsoft.com",
            "*.delivery.mp.microsoft.com",
            "*.windowsupdate.com",
            "*.windowsupdate.microsoft.com",
            "*.dl.delivery.mp.microsoft.com",
            "*.prod.do.dsp.mp.microsoft.com",
            "*.support.microsoft.com",
            "download.microsoft.com",
            "wustat.windows.com",
            "ntservicepack.microsoft.com",
            "stats.microsoft.com",
            "*.msftncsi.com",
            "*.microsoft.com.nsatc.net"
        ];

        // List of Microsoft365 domains to bypass proxy
        const m365Domains = [
            // Essential Microsoft domains
            "*.cloud.microsoft",
            "*.static.microsoft", 
            "*.usercontent.microsoft",

            // Exchange Online
            "outlook.cloud.microsoft",
            "outlook.office.com",
            "outlook.office365.com",
            "*.outlook.com",
            "*.protection.outlook.com",
            "*.mail.protection.outlook.com",
            "*.mx.microsoft",

            // SharePoint Online and OneDrive
            "*.sharepoint.com",
            "*.sharepointonline.com",
            "spoprod-a.akamaihd.net",
            "*.wns.windows.com",
            "admin.onedrive.com",
            "officeclient.microsoft.com",
            "oneclient.sfx.ms",
            "g.live.com",
            "*.svc.ms",

            // Microsoft Teams
            "*.teams.microsoft.com",
            "*.teams.cloud.microsoft",
            "*.lync.com",
            "*.skype.com",
            "compass-ssl.microsoft.com",

            // Common Microsoft 365 endpoints
            "*.office.com",
            "www.microsoft365.com",
            "*.office.net",
            "officeapps.live.com",
            "*.flow.microsoft.com",
            "*.powerapps.com",
            "*.powerautomate.com",
            "admin.microsoft.com",
            "cdn.odc.officeapps.live.com",
            "cdn.uci.officeapps.live.com"
        ];

        // List of non-routable IP ranges (RFC 3330 and RFC 6890)
        const nonRoutableIPRanges = [
            { network: '0.0.0.0', mask: '255.0.0.0' },        // This network
            { network: '35.3.62.0', mask: '255.255.255.0' },  // Home lab network
            { network: '10.0.0.0', mask: '255.0.0.0' },       // Private network
            { network: '100.64.0.0', mask: '255.192.0.0' },   // Shared Address Space
            { network: '127.0.0.0', mask: '255.0.0.0' },      // Loopback
            { network: '169.254.0.0', mask: '255.255.0.0' },  // Link-local
            { network: '172.16.0.0', mask: '255.240.0.0' },   // Private network
            { network: '192.0.0.0', mask: '255.255.255.0' },  // IETF Protocol Assignments
            { network: '192.0.2.0', mask: '255.255.255.0' },  // TEST-NET-1
            { network: '192.88.99.0', mask: '255.255.255.0' }, // 6to4 Relay Anycast
            { network: '192.168.0.0', mask: '255.255.0.0' },  // Private network
            { network: '198.18.0.0', mask: '255.254.0.0' },   // Network benchmark tests
            { network: '198.51.100.0', mask: '255.255.255.0' }, // TEST-NET-2
            { network: '203.0.113.0', mask: '255.255.255.0' }, // TEST-NET-3
            { network: '224.0.0.0', mask: '240.0.0.0' },      // Multicast
            { network: '240.0.0.0', mask: '240.0.0.0' },      // Reserved for future use
            { network: '255.255.255.255', mask: '255.255.255.255' } // Limited broadcast
        ];

        // List of Proxy servers with failover configuration
        const proxyServers = 'PROXY 192.168.202.2:7890; PROXY 192.168.201.2:7890';

        // 1. Check for direct access conditions
        
        // Don't proxy local hostnames
        if (isPlainHostName(host)) {
            return 'DIRECT';
        }

        // Don't proxy local domains
        if (localDomains.some(domain => dnsDomainIs(host, domain)) || 
            localHosts.includes(host)) {
            return 'DIRECT';
        }

        // Don't proxy Windows Update domains
        if (windowsUpdateDomains.some(domain => 
            host === domain || 
            (domain.startsWith('*.') && dnsDomainIs(host, domain.slice(2))))) {
            return 'DIRECT';
        }

        // Don't proxy Microsoft 365 domains
        if (m365Domains.some(domain => 
            host === domain || 
            (domain.startsWith('*.') && dnsDomainIs(host, domain.slice(2))))) {
            return 'DIRECT';
        }

        // 2. Check for non-routable addresses
        if (isResolvable(host)) {
            const hostIP = dnsResolve(host);
            if (nonRoutableIPRanges.some(range => isInNet(hostIP, range.network, range.mask))) {
                return 'DIRECT';
            }
        }

        // 3. Apply proxy rules for specific protocols
        if (url.startsWith('http:') || url.startsWith('https:') || url.startsWith('ftp:')) {
            return proxyServers;
        }

        // 4. Default fallback
        return 'DIRECT';
    } catch (e) {
        // If any error occurs, return DIRECT connection for safety
        return 'DIRECT';
    }
}
